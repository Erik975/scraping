"""
Script : generate_tweet_narratives.py
But : Prendre une synth√®se d'actualit√© en entr√©e et g√©n√©rer plusieurs narratifs
      (humour, s√©rieux, d√©nonciation, neutre, etc.) pr√™ts √† poster sur X (Twitter).
      ‚ûï G√®re automatiquement plusieurs cl√©s API et bascule si quota d√©pass√©.

Auteur : PTH
Date : 2025-08-01
"""

import google.generativeai as genai
from google.api_core.exceptions import ResourceExhausted

# ======== üîë LISTE DES CL√âS API GEMINI ========
API_KEYS = [
    "AIzaSyB-ZFSra3QAwh1YO0wtsuj6Xx-I99LlrV4",
    "AIzaSyB9qetZJ90xA9bJV-zW3NIE8kG8om2g7hI",
    "AIzaSyDjivt4xeVRSvZfT5YoUoD1k5CyuD8gquA",
    "AIzaSyA7ePuU7yv-s2uZyRzpZibiTAzsMSbXo4U",
    "AIzaSyAe0QdwGUZ4aODx_kRob9ixYzc2MM6sMc4",
    "AIzaSyBy3zDzNnnV5h2AWPnCHvb8jmzs4JM9QM0",
    "AIzaSyB0xokwOS_Buk2ExKeZVJ93H7o0PyU-n3k"
]

current_key_index = 0

def configure_gemini():
    """Configure Gemini avec la cl√© API active."""
    genai.configure(api_key=API_KEYS[current_key_index])

def switch_key():
    """Passe √† la cl√© API suivante si possible."""
    global current_key_index
    if current_key_index + 1 < len(API_KEYS):
        current_key_index += 1
        configure_gemini()
        print(f"üîÑ Basculement sur la cl√© API n¬∞{current_key_index + 1}")
        return True
    else:
        print("‚ùå Plus aucune cl√© API disponible.")
        return False

# ‚öôÔ∏è On configure la premi√®re cl√© au lancement
configure_gemini()
model = genai.GenerativeModel("gemini-1.5-flash")

# ====================== üé≠ PROMPTS TYPES ======================
NARRATIVE_STYLES = {
    "üì∞ S√©rieux": "R√©dige un tweet informatif, neutre et journalistique. Concentre-toi sur les faits.",
    "üòÇ Humour": "Fais un tweet dr√¥le ou ironique sur ce sujet, sans tomber dans l‚Äôoffensant.",
    "‚ö†Ô∏è D√©nonciation": "Adopte un ton engag√© et d√©nonciateur comme si tu alertais ton audience.",
    "ü§î Vulgarisation": "Explique ce sujet simplement, comme √† un ado, avec des mots accessibles.",
    "üî• Buzz / Punchline": "Propose un tweet percutant, court, qui pourrait devenir viral.",
}

# ====================== üß† FONCTION DE G√âN√âRATION ======================

def generate_narratives(synthesis: str, max_chars: int = 280, max_retries: int = 5) -> dict:
    """
    Prend une synth√®se et g√©n√®re plusieurs tweets selon des angles diff√©rents.
    üîÑ Bascule sur une autre cl√© si quota d√©pass√©.
    """
    global model
    tweets = {}

    for style, instruction in NARRATIVE_STYLES.items():
        prompt = f"""
        Contexte : {synthesis}

        üéØ Objectif : {instruction}
        ‚ö†Ô∏è Contraintes :
        - Maximum {max_chars} caract√®res (comme un tweet).
        - Pas de hashtags sauf si vraiment pertinents.
        - Pas de lien, juste le texte.
        - Style adapt√© √† {style}.
        """

        for attempt in range(1, max_retries + 1):
            try:
                response = model.generate_content(prompt)
                tweet = response.text.strip()
                tweet = tweet.replace('"', '').replace("'", "")
                tweets[style] = tweet
                break  # ‚úÖ on sort de la boucle si succ√®s
            except ResourceExhausted:
                print(f"‚ö†Ô∏è Quota d√©pass√© pour {style} (cl√© {current_key_index + 1}).")
                if switch_key():
                    model = genai.GenerativeModel("gemini-1.5-flash")
                else:
                    tweets[style] = "[Quota d√©pass√© - Aucune cl√© disponible]"
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur Gemini pour {style} (tentative {attempt}): {e}")
                if attempt == max_retries:
                    tweets[style] = f"[Erreur : {e}]"
    return tweets

# ====================== üöÄ SCRIPT PRINCIPAL ======================

if __name__ == "__main__":
    print("üì• Colle la synth√®se ou un r√©sum√© d'article (finir avec ENTR√âE + CTRL+D) :\n")
    import sys
    synthesis_input = sys.stdin.read().strip()

    print("\nüé≠ G√©n√©ration des tweets en plusieurs angles...\n")
    results = generate_narratives(synthesis_input)

    for style, tweet in results.items():
        print(f"{style} :\n{tweet}\n{'-'*50}")
